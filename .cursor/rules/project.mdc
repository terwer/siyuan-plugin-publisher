---
description: 
globs: 
alwaysApply: true
---
# Terwer Publisher Plugin - 项目规范

## 项目架构

### Monorepo 结构
```
siyuan-plugin-publisher-new-ui/
├── packages/
│   ├── ui/               # UI 组件库
│   ├── core/             # 核心功能包
│   ├── common/           # 公共工具包
│   ├── main-app/         # 主应用
│   ├── platform-adaptors/# 平台适配器
│   ├── plugin-system/    # 插件系统
│   └── docs/             # 项目文档
│
├── scripts/             # 构建脚本
├── prompts/             # 提示文档
├── .cursor/             # Cursor 配置
│   └── rules/           # 项目规范
│
├── package.json         # 根目录包配置
├── pnpm-workspace.yaml  # 工作空间配置
├── turbo.json           # Turborepo 配置
├── .gitignore           # Git 忽略配置
├── README.md            # 项目说明
├── README_zh_CN.md      # 中文项目说明
├── DEVELOPMENT.md       # 开发指南
├── DEVELOPMENT_zh_CN.md # 中文开发指南
└── policy.md            # 项目政策
```

### 包管理规范
- 使用 pnpm 作为包管理器
- 使用 Turborepo 进行构建优化
- 所有包版本号统一管理
- 共享依赖提升到根目录
- 包之间依赖关系明确声明

### 工作空间配置
```yaml
# pnpm-workspace.yaml
packages:
  - 'packages/*'
```

### 包依赖关系
```
main-app
  ├── ui
  ├── core
  ├── common
  └── platform-adaptors

ui

core
  └── common

platform-adaptors
  ├── core
  └── common

plugin-system
  ├── core
  └── common

docs
```

## 开发规范

### 通用规范
- 使用 TypeScript 进行开发
- 使用 ESLint + Prettier 进行代码格式化
- 遵循 Git Flow 工作流
- 提交信息遵循 Conventional Commits 规范

### 分支管理
- `main`: 主分支，保持稳定
- `develop`: 开发分支，用于集成功能
- `feature/*`: 功能分支，用于开发新功能
- `bugfix/*`: 修复分支，用于修复问题
- `release/*`: 发布分支，用于版本发布

### 提交规范
```
<type>(<scope>): <subject>

<body>

<footer>
```

类型（type）：
- `feat`: 新功能
- `fix`: 修复
- `docs`: 文档
- `style`: 格式
- `refactor`: 重构
- `test`: 测试
- `chore`: 构建

## 构建规范

### 构建工具
- 使用 Vite 作为构建工具
- 支持 TypeScript 编译
- 支持 Stylus 预处理器
- 支持环境变量配置

### 构建流程
1. 清理构建目录
2. 类型检查
3. 代码格式化
4. 单元测试
5. 构建打包
6. 生成文档

## 文档规范

### 文档结构
```
packages/docs/
├── .vitepress/        # VitePress 配置
│   ├── theme/        # 主题配置
│   └── config.ts     # 站点配置
├── guide/            # 使用指南
│   └── index.md      # 指南首页
└── index.md          # 文档首页
```

### 文档要求
- 使用 Markdown 格式
- 使用 VitePress 作为文档框架
- 支持中英文双语文档
- 包含代码示例
- 提供在线演示
- 保持文档同步更新

### 文档内容
- 项目说明（README.md）
- 开发指南（DEVELOPMENT.md）
- 中文开发指南（DEVELOPMENT_zh_CN.md）
- 项目政策（policy.md）
- 使用指南（packages/docs/guide/）

### 文档维护
- 代码变更时同步更新相关文档
- 重要功能必须提供使用说明
- API 变更需要更新接口文档
- 保持中英文文档的一致性

## 发布规范

### 版本管理
- 遵循语义化版本（Semantic Versioning）
- 主版本号：不兼容的 API 修改
- 次版本号：向下兼容的功能性新增
- 修订号：向下兼容的问题修正

### 发布流程
1. 更新版本号
2. 更新更新日志
3. 构建所有包
4. 发布到 npm
5. 创建 Git 标签

## CI/CD 规范

### GitHub Actions
- 代码检查
- 单元测试
- 构建验证
- 自动发布

### 部署流程
1. 代码提交触发 CI
2. 运行测试和构建
3. 生成发布包
4. 自动发布到 npm

## 贡献规范

### 开发流程
1. Fork 项目
2. 创建功能分支
3. 提交代码
4. 创建 Pull Request
5. 代码审查
6. 合并代码

### 代码审查
- 至少需要一个审查者
- 所有测试必须通过
- 代码风格符合规范
- 文档更新完整

## 开发指南

### 架构概述

SiYuan Publisher 采用模块化架构，并将所有共享类型定义集中在专门的 `common` 包中。这种设计有效避免了循环依赖，提高了可维护性。

### 核心组件和调用链

#### 1. 插件系统初始化流程

```mermaid
sequenceDiagram
    actor A as App
    actor B as PS
    actor C as PAR
    actor D as PM
    actor E as PAM

    A->>B: 初始化插件系统
    B->>C: 获取内置适配器
    C->>C: 注册内置适配器
    C-->>B: 返回适配器列表
    B->>D: 注册插件
    B->>E: 更新适配器列表
    E-->>A: 返回可用平台
```

#### 2. 平台适配器注册机制

```mermaid
graph TD
    A[默认平台适配器注册表] --> B[WordPress 适配器]
    A --> C[GitHub 适配器]
    B --> D[插件管理器]
    C --> D
    D --> E[平台适配器管理器]
    E --> F[UI 组件]
```

#### 3. 发布流程

```mermaid
sequenceDiagram
    actor A as User
    actor B as UI
    actor C as PS
    actor D as PA
    actor E as Platform

    A->>B: 选择平台
    B->>C: 获取平台配置
    C-->>B: 返回配置组件
    A->>B: 填写配置
    B->>C: 测试连接
    C->>D: 验证配置
    D->>E: 测试连接
    E-->>D: 返回结果
    D-->>C: 返回结果
    C-->>B: 显示结果
    A->>B: 发布内容
    B->>C: 发送发布请求
    C->>D: 处理发布
    D->>E: 发布内容
    E-->>D: 返回结果
    D-->>C: 返回结果
    C-->>B: 显示结果
```

### 详细组件说明

#### 1. 插件系统

插件系统是应用的核心，负责管理所有平台适配器和插件。

##### 主要组件：

- **插件管理器**：管理插件生命周期
  ```typescript
  class PluginManager {
    registerPlugin(plugin: Plugin): Promise<void>
    unloadPlugin(id: string): Promise<void>
    getPlugin(id: string): Plugin | undefined
    getAllPlugins(): Plugin[]
  }
  ```

- **平台适配器管理器**：管理平台适配器
  ```typescript
  class PlatformAdaptorManager {
    getAdaptor(id: string): PlatformAdaptor | undefined
    getAllAdaptors(): PlatformAdaptor[]
    connectAdaptor(id: string, config: any): Promise<void>
    disconnectAdaptor(id: string): Promise<void>
  }
  ```

#### 2. 平台适配器

平台适配器实现与特定平台的集成。

##### 内置适配器：

- **WordPress 适配器**
  ```typescript
  class WordPressAdaptor implements PlatformAdaptor {
    id = "wordpress"
    type = "wordpress"
    async connect(config: WordPressConfig): Promise<void>
    async publish(post: Post, options: PublishOptions): Promise<PublishResult>
  }
  ```

- **GitHub 适配器**
  ```typescript
  class GitHubAdaptor implements PlatformAdaptor {
    id = "github"
    type = "github"
    async connect(config: GitHubConfig): Promise<void>
    async publish(post: Post, options: PublishOptions): Promise<PublishResult>
  }
  ```

##### 外部适配器：

外部平台适配器可以通过插件系统动态加载，支持从 NPM 安装或本地加载。

主要特点：
- 支持动态加载和卸载
- 可以独立开发和发布
- 使用与内置适配器相同的接口
- 可以扩展支持新平台

#### 3. 主应用

主应用使用 Vue 3 构建，提供用户界面和交互逻辑。

##### 主要组件：

- **Publish.vue**：发布页面
  ```vue
  <template>
    <div class="publish">
      <!-- 平台选择 -->
      <select v-model="selectedPlatform">
        <option v-for="platform in availablePlatforms" :key="platform.id" :value="platform.id">
          {{ platform.name }}
        </option>
      </select>

      <!-- 平台配置 -->
      <component 
        :is="platformConfigComponent" 
        v-model:config="platformConfig" 
        @test="testConnection"
      />
    </div>
  </template>
  ```

### 配置流程

#### 1. 平台配置

```mermaid
graph TD
    A[选择平台] --> B[加载配置组件]
    B --> C[填写配置]
    C --> D[测试连接]
    D --> E{连接成功?}
    E -->|是| F[保存配置]
    E -->|否| G[显示错误]
    G --> C
```

#### 2. 发布配置

```mermaid
graph TD
    A[选择平台] --> B[填写文章信息]
    B --> C[选择发布状态]
    C --> D[发布文章]
    D --> E{发布成功?}
    E -->|是| F[显示成功信息]
    E -->|否| G[显示错误]
    G --> B
```

### 错误处理

#### 错误类型

```typescript
enum ErrorType {
  PLATFORM_CONNECTION_FAILED = "PLATFORM_CONNECTION_FAILED",
  PLATFORM_CONFIG_INVALID = "PLATFORM_CONFIG_INVALID",
  AUTHENTICATION_FAILED = "AUTHENTICATION_FAILED",
  INVALID_CONFIG = "INVALID_CONFIG",
  PUBLISH_FAILED = "PUBLISH_FAILED",
  UNKNOWN_ERROR = "UNKNOWN_ERROR"
}
```

#### 错误处理流程

```mermaid
sequenceDiagram
    actor A as UI
    actor B as PS
    actor C as PA
    actor D as Error

    A->>B: 执行操作
    B->>C: 调用适配器
    C->>D: 发生错误
    D->>C: 转换错误类型
    C-->>B: 返回错误
    B-->>A: 显示错误信息
```

### 开发指南

#### 1. 添加新平台适配器

1. 在 `platform-adaptors` 包中创建新适配器
2. 实现 `PlatformAdaptor` 接口
3. 在 `DefaultPlatformAdaptorRegistry` 中注册适配器
4. 创建对应的配置组件

#### 2. 修改现有适配器

1. 在 `platform-adaptors` 包中找到目标适配器
2. 修改适配器实现
3. 更新配置组件
4. 测试适配器功能

#### 3. 外部插件加载

1. **插件目录结构**
   ```
   plugins/
   ├── my-platform-plugin/
   │   ├── package.json
   │   ├── src/
   │   │   ├── index.ts
   │   │   ├── adaptor.ts
   │   │   └── config.vue
   │   └── dist/
   └── other-plugin/
   ```

2. **插件加载流程**
   ```typescript
   class ExternalPluginLoader {
     async loadPlugin(path: string): Promise<ExternalPlugin> {
       // 1. 加载插件配置
       const manifest = await this.loadManifest(path);
       
       // 2. 验证插件类型
       if (manifest.type !== "platform-adaptor") {
         throw new Error("不支持的插件类型");
       }
       
       // 3. 加载插件代码
       const plugin = await import(manifest.entry);
       
       // 4. 初始化插件
       await plugin.initialize();
       
       return plugin;
     }
   }
   ```

3. **插件配置示例**
   ```json
   {
     "name": "my-platform-plugin",
     "version": "1.0.0",
     "main": "dist/index.js",
     "siyuan-publisher": {
       "type": "platform-adaptor",
       "platform": "my-platform",
       "entry": "./dist/index.js",
       "dependencies": {
         "@siyuan-publisher/common": "^1.0.0"
       }
     }
   }
   ```

4. **插件接口定义**
   ```typescript
   interface ExternalPlugin {
     id: string;
     name: string;
     version: string;
     type: "platform-adaptor";
     platform: string;
     adaptor: PlatformAdaptor;
     configComponent?: Component;
     initialize(): Promise<void>;
     unload(): Promise<void>;
   }
   ```

5. **插件加载机制**
   - 应用启动时扫描插件目录
   - 验证插件配置和依赖
   - 动态加载插件代码
   - 初始化插件并注册到系统
   - 更新 UI 显示可用插件

6. **插件开发注意事项**
   - 确保正确的插件配置
   - 实现必需的接口方法
   - 处理依赖关系
   - 提供错误处理
   - 支持动态加载和卸载

7. **调试技巧**
   - 使用 Vue DevTools 调试 UI 组件
   - 使用浏览器控制台检查网络请求
   - 检查插件系统日志
   - 验证平台适配器配置

### 最佳实践

1. **类型安全**
   - 始终使用 TypeScript 类型
   - 避免使用 `any` 类型
   - 使用接口定义数据结构

2. **错误处理**
   - 使用统一的错误类型
   - 提供详细的错误信息
   - 实现适当的错误恢复机制

3. **配置管理**
   - 验证所有配置输入
   - 提供默认值
   - 保存用户配置

4. **测试**
   - 编写单元测试
   - 测试错误场景
   - 验证平台集成
